{"version":3,"sources":["TestChart.js","App.js","serviceWorker.js","index.js"],"names":["TestChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","labels","datasets","label","fill","pointHoverRadius","pointRadius","pointHitRadius","data","spanGaps","react_default","a","createElement","react_chartjs","options","width","height","Component","Index","src_TestChart","About","Users","App","BrowserRouter","className","href","class","Link","to","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAiCeA,cA5Bd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACN,CACIC,MAAO,mBACPC,MAAM,EACNC,iBAAkB,EAClBC,YAAa,EACbC,eAAgB,GAChBC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/BC,UAAU,KAZJhB,wEAmBlB,OACCiB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAWL,KAAMZ,KAAKI,MAAOc,QAAS,KAAMC,MAAM,MAAMC,OAAO,QAC/DN,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAUL,KAAMZ,KAAKI,MAAOc,QAAS,KAAMC,MAAM,MAAMC,OAAO,gBAxB1CC,aCClBC,EAAQ,kBAAMR,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kBAAaF,EAAAC,EAAAC,cAACO,EAAD,QAChCC,EAAQ,kBAAMV,EAAAC,EAAAC,cAAA,oBACdS,EAAQ,kBAAMX,EAAAC,EAAAC,cAAA,oBA+BLU,EA7BH,kBACVZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eACbd,EAAAC,EAAAC,cAAA,KAAGa,KAAK,KAAKC,MAAM,qBAAnB,cACAhB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,WAAT,UAEFlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,WAAT,aAMRlB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWd,IACjCR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWZ,IACjCV,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWX,QCnBrBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f79ac305.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Line as LineChart, Bar as BarChart} from 'react-chartjs';\n\nclass TestChart extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n\t\t    datasets: [\n\t\t        {\n\t\t            label: \"My First dataset\",\n\t\t            fill: false,\n\t\t            pointHoverRadius: 5,\n\t\t            pointRadius: 1,\n\t\t            pointHitRadius: 10,\n\t\t            data: [65, 59, 80, 81, 56, 55, 40],\n\t\t            spanGaps: false,\n\t\t        }\n\t\t\t]\n\t\t}\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<LineChart data={this.state} options={null} width=\"600\" height=\"250\"/>\n\t\t\t\t<BarChart data={this.state} options={null} width=\"600\" height=\"250\"/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TestChart","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport TestChart from \"./TestChart\";\n\nconst Index = () => <div><h2>Home</h2><TestChart /></div>\nconst About = () => <h2>About</h2>;\nconst Users = () => <h2>Users</h2>;\n\nconst App = () => (\n  <Router>\n    <div>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <a href=\"#!\" class=\"brand-logo center\">Tiger Dash</a>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <div className=\"container\">\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/about/\" component={About} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}